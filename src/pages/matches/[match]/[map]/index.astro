---
import MatchDetailsLayout from "../../../../layouts/MatchDetailsLayout.astro";
import { MatchHeader } from "../../../../components/MatchHeader";
import { statsApi, type PlayerInfoDict } from "../../../../util/stats-api";
import { StatsTable } from "../../../../components/StatsTable";
import { getMapStats, getMatchStats } from "../../../../util/stats";
import { MapsMenu } from "../../../../components/MapsMenu";
import { AwardsList } from "../../../../components/AwardsList";
import { getAllWeaponAwards, getAllSillyAwards } from "../../../../util/awards";

const { match, map } = Astro.params;
const roundsQuery = Astro.url.searchParams.get("round");
const matchDetails = await statsApi.fetchGroupDetails(match!);
const matchStats = getMatchStats(matchDetails);

const parseRoundsQuery = (roundsQuery: string) => {
  return Number(roundsQuery);
};

const parsedQuery = roundsQuery ? parseRoundsQuery(roundsQuery) : 0;
const rounds = parsedQuery ? [parsedQuery] : [];
const allStats = getMapStats(map ?? "all", rounds, matchStats);
const sillyAwards = getAllSillyAwards(allStats, matchDetails.match.match_id);
const weaponAwards = getAllWeaponAwards(allStats);
const playerGuids = [...matchStats.teams.beta, ...matchStats.teams.alpha].map(
  (s) => s.longId,
);
const playerDiscordNames = await statsApi.fetchUsersByGuid(
  playerGuids,
  import.meta.env.API_TOKEN,
);

const playerInfoDict = playerDiscordNames.reduce((acc, player) => {
  acc[player.guid] = player;
  return acc;
}, {} as PlayerInfoDict);
---

<MatchDetailsLayout
  frontmatter={{
    title: `ETLStats ${match}`,
    description: `Stats for match ${match}`,
  }}
>
  <MatchHeader activeMap={map} match={matchStats} />
  <MapsMenu
    activeRound={parsedQuery}
    activeMap={map}
    matchId={match!}
    match={matchStats}
  />
  <StatsTable playerInfoDict={playerInfoDict} client:load stats={allStats} />
  <AwardsList client:load awards={sillyAwards} title="Match awards" />
  <AwardsList client:load awards={weaponAwards} title="Weapon awards" />
</MatchDetailsLayout>
