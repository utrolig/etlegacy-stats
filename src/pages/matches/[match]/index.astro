---
import Layout from "../../../layouts/Layout.astro";
import { MatchHeader } from "../../../components/MatchHeader";
import { MapsMenu } from "../../../components/MapsMenu";
import { statsApi, type PlayerInfoDict } from "../../../util/stats-api";
import { StatsTable } from "../../../components/StatsTable";
import { getMapStats, getMatchStats } from "../../../util/stats";
import { AwardsList } from "../../../components/AwardsList";
import { getAllWeaponAwards, getAllSillyAwards } from "../../../util/awards";

const { match } = Astro.params;
const matchDetails = await statsApi.fetchGroupDetails(match!);
const matchStats = getMatchStats(matchDetails);
const allStats = getMapStats("all", [], matchStats);
const sillyAwards = getAllSillyAwards(allStats, matchDetails.match.match_id);
const weaponAwards = getAllWeaponAwards(allStats);
const playerGuids = [...matchStats.teams.beta, ...matchStats.teams.alpha].map(
  (s) => s.longId,
);
const playerDiscordNames = await statsApi.fetchUsersByGuid(
  playerGuids,
  import.meta.env.API_TOKEN,
);

const playerInfoDict = playerDiscordNames.reduce((acc, player) => {
  acc[player.guid] = player;
  return acc;
}, {} as PlayerInfoDict);
---

<Layout
  frontmatter={{
    title: `ETLStats ${match}`,
    description: `Stats for match ${match}`,
  }}
>
  <MatchHeader match={matchStats} />
  <MapsMenu matchId={match!} match={matchStats} />
  <StatsTable client:load stats={allStats} playerInfoDict={playerInfoDict} />
  <AwardsList client:load awards={sillyAwards} title="Match awards" />
  <AwardsList client:load awards={weaponAwards} title="Weapon awards" />
</Layout>
