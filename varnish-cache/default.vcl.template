vcl 4.1;

backend default {
    .host = "astro-server";
    .port = "4321";
    .connect_timeout = 5s;
    .first_byte_timeout = 60s;
    .between_bytes_timeout = 10s;
    .max_connections = 300;
}

sub vcl_recv {
    if (req.method == "PURGE") {
        if (req.http.X-Purge-Token != "$VARNISH_PURGE_TOKEN") {
            return(synth(401, "Unauthorized"));
        }
        
        # Special case for root path - use ban to invalidate all variations with query params
        if (req.url ~ "^/$" || req.url ~ "^/\?") {
            # Ban the root path and its variations
            ban("req.url ~ ^/ && req.http.host == " + req.http.host);
            # Also ban the search path and its variations
            ban("req.url ~ ^/search && req.http.host == " + req.http.host);
            return(synth(200, "Ban for root and search paths processed"));
        }
        
        # Special case for match paths - use ban to invalidate all variations with query params
        if (req.url ~ "^/matches/[^/?]+$" || req.url ~ "^/matches/[^/]+\?") {
            # Extract the match ID from the URL
            if (req.url ~ "^/matches/([^/?]+)") {
                ban("req.url ~ ^/matches/" + regsub(req.url, "^/matches/([^/?]+).*", "\1") + " && req.http.host == " + req.http.host);
                return(synth(200, "Ban for match path processed"));
            }
        }
        
        # For all other paths, use regular purge
        return (purge);
    }

    if (req.http.Accept-Encoding) {
        if (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } else if (req.http.Accept-Encoding ~ "deflate") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            unset req.http.Accept-Encoding;
        }
    }

    if (req.method != "GET" && req.method != "HEAD") {
        return (pass);
    }

    return (hash);
}

sub vcl_backend_response {
    set beresp.ttl = 365d;

    if (beresp.status >= 500 && beresp.status < 600) {
        set beresp.uncacheable = true;
        return (deliver);
    }

    set beresp.grace = 1h;
    return (deliver);
}

sub vcl_deliver {
    if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
        set resp.http.X-Cache-Hits = obj.hits;
    } else {
        set resp.http.X-Cache = "MISS";
    }

    unset resp.http.X-Powered-By;
    return (deliver);
}
